{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "couch-surfer",
  "type": "registry:component",
  "title": "Couch Surfer",
  "description": "A fullstack TV show discovery app with show details, search functionality, and popular shows listing.",
  "registryDependencies": [
    "https://registry-demo-xi.vercel.app/r/start.json"
  ],
  "files": [
    {
      "path": "app/(lumon)/couch-surfer/page.tsx",
      "content": "import { Suspense } from \"react\";\nimport { ShowDetails } from \"@/components/couch-surfer/show-details\";\nimport { PopularShows } from \"@/components/couch-surfer/popular-shows\";\nimport { SearchBar } from \"@/components/couch-surfer/search-bar\";\n\nexport default function Home() {\n  return (\n    <>\n      <header className=\"border-b border-border py-4\">\n        <div className=\"container flex flex-col sm:flex-row items-center justify-between gap-4\">\n          <a\n            href=\"/couch-surfer\"\n            className=\"tex/couch-surfer/showfont-bold text-primary\"\n          >\n            Couch Surfer\n          </a>\n          <Suspense>\n            <SearchBar />\n          </Suspense>\n        </div>\n      </header>\n\n      <div className=\"min-h-screen py-8\">\n        <header className=\"mb-12 text-center\">\n          <h1 className=\"text-4xl font-bold mb-2\">Featured TV Show</h1>\n        </header>\n\n        <ShowDetails showId=\"20177\" />\n\n        <div className=\"mt-16\">\n          <h2 className=\"text-2xl font-bold mb-6 border-l-4 border-primary pl-4\">\n            Popular Shows You Might Like\n          </h2>\n          <PopularShows />\n        </div>\n      </div>\n    </>\n  );\n}\n",
      "type": "registry:file",
      "target": "app/couch-surfer/page.tsx"
    },
    {
      "path": "app/(lumon)/couch-surfer/search/page.tsx",
      "content": "import { Suspense } from \"react\";\nimport { SearchResults } from \"@/components/couch-surfer/search-results\";\nimport Link from \"next/link\";\nimport { ArrowLeft } from \"lucide-react\";\nimport { SearchBar } from \"@/components/couch-surfer/search-bar\";\n\nexport default function SearchPage({\n  searchParams,\n}: {\n  searchParams: { q: string };\n}) {\n  const query = searchParams.q || \"\";\n\n  return (\n    <>\n      <header className=\"border-b border-border py-4\">\n        <div className=\"container flex flex-col sm:flex-row items-center justify-between gap-4\">\n          <a href=\"/couch-surfer\" className=\"text-xl font-bold text-primary\">\n            Couch Surfer\n          </a>\n          <Suspense>\n            <SearchBar />\n          </Suspense>\n        </div>\n      </header>\n\n      <div className=\"min-h-screen py-8\">\n        <header className=\"mb-8 max-w-6xl mx-auto px-4\">\n          <Link\n            href=\"/couch-surfer\"\n            className=\"inline-flex items-center gap-2 text-primary hover:text-primary/80 transition-colors mb-4\"\n          >\n            <ArrowLeft className=\"w-4 h-4\" />\n            Back to Home\n          </Link>\n          <h1 className=\"text-3xl font-bold\">Search Results for \"{query}\"</h1>\n        </header>\n\n        <div className=\"max-w-6xl mx-auto px-4\">\n          <SearchResults query={query} />\n        </div>\n      </div>\n    </>\n  );\n}\n",
      "type": "registry:file",
      "target": "app/couch-surfer/search/page.tsx"
    },
    {
      "path": "app/(lumon)/couch-surfer/show/[id]/page.tsx",
      "content": "import { Suspense } from \"react\";\nimport { ShowDetails } from \"@/components/couch-surfer/show-details\";\nimport { PopularShows } from \"@/components/couch-surfer/popular-shows\";\nimport Link from \"next/link\";\nimport { ArrowLeft } from \"lucide-react\";\nimport { SearchBar } from \"@/components/couch-surfer/search-bar\";\n\nexport default function ShowPage({ params }: { params: { id: string } }) {\n  return (\n    <>\n      <header className=\"border-b border-border py-4\">\n        <div className=\"container flex flex-col sm:flex-row items-center justify-between gap-4\">\n          <a href=\"/couch-surfer\" className=\"text-xl font-bold text-primary\">\n            Couch Surfer\n          </a>\n          <Suspense>\n            <SearchBar />\n          </Suspense>\n        </div>\n      </header>\n\n      <div className=\"min-h-screen py-8\">\n        <header className=\"mb-8 max-w-6xl mx-auto px-4\">\n          <Link\n            href=\"/couch-surfer\"\n            className=\"inline-flex items-center gap-2 text-primary hover:text-primary/80 transition-colors mb-4\"\n          >\n            <ArrowLeft className=\"w-4 h-4\" />\n            Back to Home\n          </Link>\n        </header>\n\n        <ShowDetails showId={params.id} />\n\n        <div className=\"mt-16 max-w-6xl mx-auto px-4\">\n          <h2 className=\"text-2xl font-bold mb-6 border-l-4 border-primary pl-4\">\n            Popular Shows You Might Like\n          </h2>\n          <PopularShows />\n        </div>\n      </div>\n    </>\n  );\n}\n",
      "type": "registry:file",
      "target": "app/couch-surfer/show/[id]/page.tsx"
    },
    {
      "path": "app/(lumon)/couch-surfer/show/[id]/loading.tsx",
      "content": "export default function Loading() {\n  return null\n}\n",
      "type": "registry:file",
      "target": "app/couch-surfer/show/[id]/loading.tsx"
    },
    {
      "path": "components/couch-surfer/popular-shows.tsx",
      "content": "\"use client\";\n\nimport { useState, useEffect } from \"react\";\nimport Image from \"next/image\";\nimport Link from \"next/link\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Star, Loader2, AlertCircle } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface Show {\n  id: number;\n  name: string;\n  permalink: string;\n  start_date: string;\n  end_date: string | null;\n  country: string;\n  network: string;\n  status: string;\n  image_thumbnail_path: string;\n}\n\nexport function PopularShows() {\n  const [shows, setShows] = useState<Show[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n\n  useEffect(() => {\n    async function fetchPopularShows() {\n      setLoading(true);\n      setError(false);\n\n      try {\n        const res = await fetch(\n          \"https://www.episodate.com/api/most-popular?page=1\"\n        );\n        if (!res.ok) throw new Error(\"Failed to fetch popular shows\");\n\n        const data = await res.json();\n        if (data.tv_shows) {\n          setShows(data.tv_shows);\n        } else {\n          setError(true);\n        }\n      } catch (err) {\n        console.error(\"Error fetching popular shows:\", err);\n        setError(true);\n      } finally {\n        setLoading(false);\n      }\n    }\n\n    fetchPopularShows();\n  }, []);\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-[30vh]\">\n        <div className=\"flex flex-col items-center gap-2\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n          <p className=\"text-sm text-muted-foreground\">\n            Loading popular shows...\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error || !shows.length) {\n    return (\n      <div className=\"flex flex-col items-center justify-center min-h-[30vh] px-4 text-center\">\n        <AlertCircle className=\"h-12 w-12 text-destructive mb-4\" />\n        <h2 className=\"text-xl font-bold mb-2\">Couldn't load popular shows</h2>\n        <p className=\"text-muted-foreground mb-6 max-w-md\">\n          We couldn't load the popular shows. This might be due to a network\n          issue or the API being temporarily unavailable.\n        </p>\n        <Button onClick={() => window.location.reload()}>Try again</Button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-4 md:gap-6\">\n      {shows.map((show) => (\n        <Card\n          key={show.id}\n          className=\"overflow-hidden hover:shadow-md transition-shadow\"\n        >\n          <Link href={`/couch-surfer/show/${show.id}`} className=\"block\">\n            <div className=\"aspect-[2/3] relative\">\n              <Image\n                src={\n                  show.image_thumbnail_path ||\n                  \"/placeholder.svg?height=300&width=200\"\n                }\n                alt={show.name}\n                fill\n                className=\"object-cover\"\n              />\n              <div className=\"absolute bottom-0 left-0 right-0 bg-gradient-to-t from-background to-transparent p-2\">\n                <div className=\"flex items-center gap-1 text-xs\">\n                  <Star className=\"w-3 h-3 text-primary\" />\n                  <span>{show.network}</span>\n                </div>\n              </div>\n            </div>\n            <CardContent className=\"p-3\">\n              <h3 className=\"font-medium text-sm line-clamp-2\">{show.name}</h3>\n              <p className=\"text-xs text-muted-foreground mt-1\">\n                {show.status}\n              </p>\n            </CardContent>\n          </Link>\n        </Card>\n      ))}\n    </div>\n  );\n}\n",
      "type": "registry:file",
      "target": "components/couch-surfer/popular-shows.tsx"
    },
    {
      "path": "components/couch-surfer/search-bar.tsx",
      "content": "\"use client\"\n\nimport type React from \"react\"\n\nimport { useState, useEffect, useRef } from \"react\"\nimport { useRouter } from \"next/navigation\"\nimport { Search, Loader2, X } from \"lucide-react\"\nimport { Input } from \"@/components/ui/input\"\nimport { Button } from \"@/components/ui/button\"\nimport Image from \"next/image\"\n\ninterface SearchResult {\n  id: number\n  name: string\n  permalink: string\n  start_date: string\n  network: string\n  image_thumbnail_path: string\n}\n\nexport function SearchBar() {\n  const [query, setQuery] = useState(\"\")\n  const [debouncedQuery, setDebouncedQuery] = useState(\"\")\n  const [results, setResults] = useState<SearchResult[]>([])\n  const [isLoading, setIsLoading] = useState(false)\n  const [isOpen, setIsOpen] = useState(false)\n  const [selectedIndex, setSelectedIndex] = useState(-1)\n  const router = useRouter()\n  const searchRef = useRef<HTMLDivElement>(null)\n\n  // Simple debounce implementation\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setDebouncedQuery(query)\n    }, 300)\n\n    return () => clearTimeout(timer)\n  }, [query])\n\n  // Handle clicks outside the search component\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (searchRef.current && !searchRef.current.contains(event.target as Node)) {\n        setIsOpen(false)\n      }\n    }\n\n    document.addEventListener(\"mousedown\", handleClickOutside)\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside)\n  }, [])\n\n  // Fetch search results\n  useEffect(() => {\n    const fetchResults = async () => {\n      if (debouncedQuery.length < 2) {\n        setResults([])\n        setIsLoading(false)\n        return\n      }\n\n      setIsLoading(true)\n      try {\n        const res = await fetch(`https://www.episodate.com/api/search?q=${encodeURIComponent(debouncedQuery)}&page=1`)\n        if (!res.ok) throw new Error(\"Failed to fetch search results\")\n\n        const data = await res.json()\n        setResults(data.tv_shows.slice(0, 5)) // Limit to 5 suggestions\n        setIsOpen(data.tv_shows.length > 0)\n      } catch (error) {\n        console.error(\"Search error:\", error)\n        setResults([])\n      } finally {\n        setIsLoading(false)\n      }\n    }\n\n    fetchResults()\n  }, [debouncedQuery])\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (!isOpen) return\n\n    switch (e.key) {\n      case \"ArrowDown\":\n        e.preventDefault()\n        setSelectedIndex((prev) => (prev < results.length - 1 ? prev + 1 : prev))\n        break\n      case \"ArrowUp\":\n        e.preventDefault()\n        setSelectedIndex((prev) => (prev > 0 ? prev - 1 : 0))\n        break\n      case \"Enter\":\n        e.preventDefault()\n        if (selectedIndex >= 0 && results[selectedIndex]) {\n          navigateToShow(results[selectedIndex].id)\n        } else if (query.trim() !== \"\") {\n          handleSearch()\n        }\n        break\n      case \"Escape\":\n        setIsOpen(false)\n        break\n    }\n  }\n\n  const navigateToShow = (id: number) => {\n    router.push(`/show/${id}`)\n    setQuery(\"\")\n    setIsOpen(false)\n  }\n\n  const handleSearch = () => {\n    if (query.trim() !== \"\") {\n      router.push(`/search?q=${encodeURIComponent(query)}`)\n      setIsOpen(false)\n    }\n  }\n\n  const clearSearch = () => {\n    setQuery(\"\")\n    setResults([])\n    setIsOpen(false)\n  }\n\n  return (\n    <div className=\"relative w-full max-w-md\" ref={searchRef}>\n      <div className=\"relative flex items-center\">\n        <Input\n          type=\"text\"\n          placeholder=\"Search for TV shows...\"\n          value={query}\n          onChange={(e) => setQuery(e.target.value)}\n          onKeyDown={handleKeyDown}\n          onFocus={() => query.length >= 2 && results.length > 0 && setIsOpen(true)}\n          className=\"pr-16\"\n        />\n        {query.length > 0 && (\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            className=\"absolute right-8 h-full\"\n            onClick={clearSearch}\n            aria-label=\"Clear search\"\n          >\n            <X className=\"h-4 w-4\" />\n          </Button>\n        )}\n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          className=\"absolute right-0 h-full\"\n          onClick={handleSearch}\n          aria-label=\"Search\"\n        >\n          {isLoading ? <Loader2 className=\"h-4 w-4 animate-spin\" /> : <Search className=\"h-4 w-4\" />}\n        </Button>\n      </div>\n\n      {isOpen && results.length > 0 && (\n        <div className=\"absolute z-50 w-full mt-1 bg-card border border-border rounded-md shadow-lg overflow-hidden\">\n          <ul className=\"py-1\">\n            {results.map((show, index) => (\n              <li\n                key={show.id}\n                className={`px-3 py-2 cursor-pointer flex items-center gap-3 hover:bg-accent/50 ${\n                  index === selectedIndex ? \"bg-accent\" : \"\"\n                }`}\n                onClick={() => navigateToShow(show.id)}\n                onMouseEnter={() => setSelectedIndex(index)}\n              >\n                <div className=\"relative h-10 w-16 flex-shrink-0\">\n                  <Image\n                    src={show.image_thumbnail_path || \"/placeholder.svg?height=60&width=40\"}\n                    alt={show.name}\n                    fill\n                    className=\"object-cover rounded-sm\"\n                  />\n                </div>\n                <div className=\"flex-1 min-w-0\">\n                  <p className=\"font-medium text-sm truncate\">{show.name}</p>\n                  <p className=\"text-xs text-muted-foreground truncate\">{show.network}</p>\n                </div>\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  )\n}\n",
      "type": "registry:file",
      "target": "components/couch-surfer/search-bar.tsx"
    },
    {
      "path": "components/couch-surfer/search-results.tsx",
      "content": "\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { Loader2, AlertCircle } from \"lucide-react\"\nimport { Button } from \"@/components/ui/button\"\nimport Image from \"next/image\"\nimport Link from \"next/link\"\nimport { Card, CardContent } from \"@/components/ui/card\"\nimport { Star } from \"lucide-react\"\n\ninterface Show {\n  id: number\n  name: string\n  permalink: string\n  start_date: string\n  end_date: string | null\n  country: string\n  network: string\n  status: string\n  image_thumbnail_path: string\n}\n\ninterface SearchResultsProps {\n  query: string\n}\n\nexport function SearchResults({ query }: SearchResultsProps) {\n  const [shows, setShows] = useState<Show[]>([])\n  const [total, setTotal] = useState(0)\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState(false)\n\n  useEffect(() => {\n    async function fetchSearchResults() {\n      if (!query) {\n        setShows([])\n        setTotal(0)\n        setLoading(false)\n        return\n      }\n\n      setLoading(true)\n      setError(false)\n\n      try {\n        const res = await fetch(`https://www.episodate.com/api/search?q=${encodeURIComponent(query)}&page=1`)\n        if (!res.ok) throw new Error(\"Failed to fetch search results\")\n\n        const data = await res.json()\n        if (data.tv_shows) {\n          setShows(data.tv_shows)\n          setTotal(Number.parseInt(data.total) || 0)\n        } else {\n          setError(true)\n        }\n      } catch (err) {\n        console.error(\"Error searching shows:\", err)\n        setError(true)\n      } finally {\n        setLoading(false)\n      }\n    }\n\n    fetchSearchResults()\n  }, [query])\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-[30vh]\">\n        <div className=\"flex flex-col items-center gap-2\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n          <p className=\"text-sm text-muted-foreground\">Searching for shows...</p>\n        </div>\n      </div>\n    )\n  }\n\n  if (error) {\n    return (\n      <div className=\"flex flex-col items-center justify-center min-h-[30vh] px-4 text-center\">\n        <AlertCircle className=\"h-12 w-12 text-destructive mb-4\" />\n        <h2 className=\"text-xl font-bold mb-2\">Search failed</h2>\n        <p className=\"text-muted-foreground mb-6 max-w-md\">\n          We couldn't complete your search. This might be due to a network issue or the API being temporarily\n          unavailable.\n        </p>\n        <Button onClick={() => window.location.reload()}>Try again</Button>\n      </div>\n    )\n  }\n\n  if (shows.length === 0) {\n    return (\n      <div className=\"text-center py-12\">\n        <h2 className=\"text-xl font-medium mb-2\">No shows found</h2>\n        <p className=\"text-muted-foreground\">Try searching with different keywords</p>\n      </div>\n    )\n  }\n\n  return (\n    <>\n      <p className=\"text-muted-foreground mb-6\">Found {total} results</p>\n\n      <div className=\"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-4 md:gap-6\">\n        {shows.map((show) => (\n          <Card key={show.id} className=\"overflow-hidden hover:shadow-md transition-shadow\">\n            <Link href={`/show/${show.id}`} className=\"block\">\n              <div className=\"aspect-[2/3] relative\">\n                <Image\n                  src={show.image_thumbnail_path || \"/placeholder.svg?height=300&width=200\"}\n                  alt={show.name}\n                  fill\n                  className=\"object-cover\"\n                />\n                <div className=\"absolute bottom-0 left-0 right-0 bg-gradient-to-t from-background to-transparent p-2\">\n                  <div className=\"flex items-center gap-1 text-xs\">\n                    <Star className=\"w-3 h-3 text-primary\" />\n                    <span>{show.network}</span>\n                  </div>\n                </div>\n              </div>\n              <CardContent className=\"p-3\">\n                <h3 className=\"font-medium text-sm line-clamp-2\">{show.name}</h3>\n                <p className=\"text-xs text-muted-foreground mt-1\">{show.status}</p>\n              </CardContent>\n            </Link>\n          </Card>\n        ))}\n      </div>\n    </>\n  )\n}\n",
      "type": "registry:file",
      "target": "components/couch-surfer/search-results.tsx"
    },
    {
      "path": "components/couch-surfer/show-details.tsx",
      "content": "\"use client\"\n\nimport Image from \"next/image\"\nimport { useState, useEffect } from \"react\"\nimport { Calendar, Clock, Star, Tag, Tv2, Loader2, AlertCircle } from \"lucide-react\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent } from \"@/components/ui/card\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\n\ninterface Episode {\n  season: number\n  episode: number\n  name: string\n  air_date: string\n}\n\ninterface Show {\n  id: number\n  name: string\n  permalink: string\n  url: string\n  description: string\n  description_source: string\n  start_date: string\n  end_date: string | null\n  country: string\n  status: string\n  runtime: number\n  network: string\n  youtube_link: string | null\n  image_path: string\n  image_thumbnail_path: string\n  rating: string\n  rating_count: string\n  countdown: null | any\n  genres: string[]\n  pictures: string[]\n  episodes: Episode[]\n}\n\ninterface ShowDetailsProps {\n  showId: string\n}\n\nexport function ShowDetails({ showId }: ShowDetailsProps) {\n  const [show, setShow] = useState<Show | null>(null)\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState(false)\n  const [activeTab, setActiveTab] = useState(\"overview\")\n\n  useEffect(() => {\n    async function fetchShowDetails() {\n      setLoading(true)\n      setError(false)\n\n      try {\n        const res = await fetch(`https://www.episodate.com/api/show-details?q=${showId}`)\n        if (!res.ok) throw new Error(\"Failed to fetch show details\")\n\n        const data = await res.json()\n        if (data.tvShow) {\n          setShow(data.tvShow)\n        } else {\n          setError(true)\n        }\n      } catch (err) {\n        console.error(\"Error fetching show details:\", err)\n        setError(true)\n      } finally {\n        setLoading(false)\n      }\n    }\n\n    fetchShowDetails()\n  }, [showId])\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-[50vh]\">\n        <div className=\"flex flex-col items-center gap-2\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n          <p className=\"text-sm text-muted-foreground\">Loading show data...</p>\n        </div>\n      </div>\n    )\n  }\n\n  if (error || !show) {\n    return (\n      <div className=\"flex flex-col items-center justify-center min-h-[50vh] px-4 text-center\">\n        <AlertCircle className=\"h-12 w-12 text-destructive mb-4\" />\n        <h2 className=\"text-2xl font-bold mb-2\">Something went wrong!</h2>\n        <p className=\"text-muted-foreground mb-6 max-w-md\">\n          We couldn't load the show information. This might be due to a network issue or the API being temporarily\n          unavailable.\n        </p>\n        <Button onClick={() => window.location.reload()}>Try again</Button>\n      </div>\n    )\n  }\n\n  // Group episodes by season\n  const episodesBySeason =\n    show.episodes?.reduce(\n      (acc, episode) => {\n        if (!acc[episode.season]) {\n          acc[episode.season] = []\n        }\n        acc[episode.season].push(episode)\n        return acc\n      },\n      {} as Record<number, Episode[]>,\n    ) || {}\n\n  const seasons = Object.keys(episodesBySeason)\n    .map(Number)\n    .sort((a, b) => a - b)\n\n  return (\n    <div className=\"max-w-6xl mx-auto px-4\">\n      <div className=\"flex flex-col lg:flex-row gap-8 mb-8\">\n        <div className=\"lg:w-1/3 flex-shrink-0\">\n          <div className=\"relative aspect-[2/3] w-full max-w-[400px] mx-auto lg:mx-0 overflow-hidden rounded-lg shadow-lg border border-accent/20\">\n            <Image\n              src={show.image_path || \"/placeholder.svg?height=600&width=400\"}\n              alt={show.name}\n              fill\n              className=\"object-cover\"\n              priority\n            />\n          </div>\n\n          <div className=\"mt-6 flex flex-wrap gap-2 justify-center lg:justify-start\">\n            {show.genres.map((genre) => (\n              <Badge key={genre} variant=\"secondary\" className=\"text-xs\">\n                {genre}\n              </Badge>\n            ))}\n          </div>\n        </div>\n\n        <div className=\"lg:w-2/3\">\n          <h1 className=\"text-4xl font-bold mb-2\">{show.name}</h1>\n\n          <div className=\"flex flex-wrap gap-4 mb-6 text-sm text-muted-foreground\">\n            <div className=\"flex items-center gap-1\">\n              <Star className=\"w-4 h-4 text-primary\" />\n              <span>{show.rating}/10</span>\n            </div>\n            <div className=\"flex items-center gap-1\">\n              <Calendar className=\"w-4 h-4\" />\n              <span>{show.start_date}</span>\n            </div>\n            <div className=\"flex items-center gap-1\">\n              <Clock className=\"w-4 h-4\" />\n              <span>{show.runtime} min</span>\n            </div>\n            <div className=\"flex items-center gap-1\">\n              <Tv2 className=\"w-4 h-4\" />\n              <span>{show.network}</span>\n            </div>\n            <div className=\"flex items-center gap-1\">\n              <Tag className=\"w-4 h-4\" />\n              <span>{show.status}</span>\n            </div>\n          </div>\n\n          <div className=\"mb-8\">\n            <h2 className=\"text-xl font-semibold mb-2\">Overview</h2>\n            <div className=\"text-muted-foreground\" dangerouslySetInnerHTML={{ __html: show.description }} />\n          </div>\n\n          {show.youtube_link && (\n            <div className=\"mb-6\">\n              <Button variant=\"outline\" className=\"gap-2\" asChild>\n                <a href={show.youtube_link} target=\"_blank\" rel=\"noopener noreferrer\">\n                  <svg className=\"w-5 h-5 text-red-500\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                    <path d=\"M23.498 6.186a3.016 3.016 0 0 0-2.122-2.136C19.505 3.545 12 3.545 12 3.545s-7.505 0-9.377.505A3.017 3.017 0 0 0 .502 6.186C0 8.07 0 12 0 12s0 3.93.502 5.814a3.016 3.016 0 0 0 2.122 2.136c1.871.505 9.376.505 9.376.505s7.505 0 9.377-.505a3.015 3.015 0 0 0 2.122-2.136C24 15.93 24 12 24 12s0-3.93-.502-5.814zM9.545 15.568V8.432L15.818 12l-6.273 3.568z\" />\n                  </svg>\n                  Watch Trailer\n                </a>\n              </Button>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {show.episodes && show.episodes.length > 0 && (\n        <Tabs defaultValue=\"season-1\" className=\"mt-12\">\n          <h2 className=\"text-2xl font-bold mb-4\">Episodes</h2>\n          <TabsList className=\"mb-4 flex flex-wrap\">\n            {seasons.map((season) => (\n              <TabsTrigger key={season} value={`season-${season}`}>\n                Season {season}\n              </TabsTrigger>\n            ))}\n          </TabsList>\n\n          {seasons.map((season) => (\n            <TabsContent key={season} value={`season-${season}`} className=\"space-y-4\">\n              {episodesBySeason[season].map((episode) => (\n                <Card key={`${episode.season}-${episode.episode}`}>\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex justify-between items-center\">\n                      <div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          S{episode.season}:E{episode.episode}\n                        </div>\n                        <div className=\"font-medium\">{episode.name}</div>\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        {new Date(episode.air_date).toLocaleDateString()}\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </TabsContent>\n          ))}\n        </Tabs>\n      )}\n\n      {show.pictures && show.pictures.length > 0 && (\n        <div className=\"mt-12\">\n          <h2 className=\"text-2xl font-bold mb-4\">Gallery</h2>\n          <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\n            {show.pictures.slice(0, 8).map((picture, index) => (\n              <div key={index} className=\"aspect-video relative rounded-md overflow-hidden border border-accent/20\">\n                <Image\n                  src={picture || \"/placeholder.svg\"}\n                  alt={`${show.name} - Image ${index + 1}`}\n                  fill\n                  className=\"object-cover\"\n                />\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  )\n}\n",
      "type": "registry:file",
      "target": "components/couch-surfer/show-details.tsx"
    }
  ]
}