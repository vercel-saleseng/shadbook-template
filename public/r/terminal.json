{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "Terminal",
  "type": "registry:component",
  "title": "Terminal Interface",
  "description": "An interactive terminal interface with number grid, progress tracking, and file selection.",
  "registryDependencies": [
    "https://registry-demo-xi.vercel.app/r/start.json"
  ],
  "files": [
    {
      "path": "app/(lumon)/terminal/page.tsx",
      "content": "\"use client\";\n\nimport { useRef, useState } from \"react\";\nimport { Header, files } from \"@/components/terminal/header\";\nimport { NumberGrid } from \"@/components/terminal/number-grid\";\nimport { Footer, type SectionData } from \"@/components/terminal/footer\";\n\nexport default function Page() {\n  const [progress, setProgress] = useState(19);\n  const [selectedFile, setSelectedFile] = useState(files[0]);\n  const [sectionProgress, setSectionProgress] = useState<SectionData[]>([\n    { id: \"01\", progress: 30, active: false },\n    { id: \"02\", progress: 11, active: false },\n    { id: \"03\", progress: 9, active: false },\n    { id: \"04\", progress: 27, active: false },\n    { id: \"05\", progress: 18, active: false },\n  ]);\n  const [activeSection, setActiveSection] = useState<string | null>(null);\n  const numberGridRef = useRef<any>(null);\n\n  // Find a container with less than 100% progress\n  const findAvailableContainer = () => {\n    // Filter containers that aren't at 100%\n    const availableContainers = sectionProgress.filter(\n      (section) => section.progress < 100\n    );\n\n    if (availableContainers.length === 0) return null;\n\n    // Pick a random container from available ones\n    const randomIndex = Math.floor(Math.random() * availableContainers.length);\n    return availableContainers[randomIndex].id;\n  };\n\n  const handleNumberClick = (rowIndex: number, colIndex: number) => {\n    // Find an available container\n    const containerId = findAvailableContainer();\n    if (!containerId) return; // All containers are at 100%\n\n    // Update active section\n    setActiveSection(containerId);\n\n    // Update section progress\n    setSectionProgress((prev) =>\n      prev.map((section) => ({\n        ...section,\n        active: section.id === containerId,\n        progress:\n          section.id === containerId\n            ? Math.min(section.progress + 3, 100)\n            : section.progress,\n      }))\n    );\n\n    // Update overall progress\n    setProgress((prev) => Math.min(prev + 1, 100));\n\n    resetActiveSection();\n  };\n\n  // Reset active section after animation completes\n  const resetActiveSection = () => {\n    setTimeout(() => {\n      setSectionProgress((prev) =>\n        prev.map((section) => ({\n          ...section,\n          active: false,\n        }))\n      );\n      setActiveSection(null);\n    }, 3200); // Increased to match the total animation duration (700 + 1500 + 1000)\n  };\n\n  // Handle file change\n  const handleFileChange = (file: (typeof files)[0]) => {\n    setSelectedFile(file);\n    // Reset progress when changing files\n    setProgress(Math.floor(Math.random() * 30));\n    // Regenerate grid\n    if (NumberGrid.regenerateGrid) {\n      NumberGrid.regenerateGrid();\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background p-4 sm:p-6 md:p-8 flex items-center justify-center font-mono\">\n      <div className=\"w-full max-w-4xl border border-border rounded-md bg-card text-card-foreground shadow-lg overflow-hidden\">\n        <Header\n          progress={progress}\n          selectedFile={selectedFile}\n          onFileChange={handleFileChange}\n        />\n        <NumberGrid onNumberClick={handleNumberClick} ref={numberGridRef} />\n        <Footer sections={sectionProgress} />\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:file",
      "target": "app/terminal/page.tsx"
    },
    {
      "path": "components/terminal/header.tsx",
      "content": "\"use client\";\n\nimport { useState } from \"react\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Check, ChevronsUpDown } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"@/components/ui/command\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport Image from \"next/image\";\n\n// File options for the combobox\nexport const files = [\n  { value: \"fluid-hive\", label: \"Fluid Hive\" },\n  { value: \"dranesville\", label: \"Dranesville\" },\n  { value: \"tumwater\", label: \"Tumwater\" },\n  { value: \"lexington\", label: \"Lexington\" },\n  { value: \"siena\", label: \"Siena\" },\n  { value: \"havana\", label: \"Havana\" },\n  { value: \"brasilia\", label: \"Brasilia\" },\n  { value: \"cairo\", label: \"Cairo\" },\n];\n\ninterface HeaderProps {\n  progress: number;\n  selectedFile: (typeof files)[0];\n  onFileChange: (file: (typeof files)[0]) => void;\n}\n\nexport function Header({ progress, selectedFile, onFileChange }: HeaderProps) {\n  const [open, setOpen] = useState(false);\n\n  return (\n    <div className=\"border-b border-border p-4\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-2\">\n          <Popover open={open} onOpenChange={setOpen}>\n            <PopoverTrigger asChild>\n              <Button\n                variant=\"outline\"\n                role=\"combobox\"\n                aria-expanded={open}\n                className=\"w-[180px] justify-between ml-2 bg-muted border-border text-muted-foreground hover:bg-muted hover:text-[hsl(var(--primary))]\"\n              >\n                {selectedFile.label}\n                <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n              </Button>\n            </PopoverTrigger>\n            <PopoverContent className=\"w-[180px] p-0 bg-card border-border\">\n              <Command className=\"bg-transparent\">\n                <CommandInput\n                  placeholder=\"Search file...\"\n                  className=\"h-9 bg-transparent\"\n                />\n                <CommandList>\n                  <CommandEmpty>No file found.</CommandEmpty>\n                  <CommandGroup>\n                    {files.map((file) => (\n                      <CommandItem\n                        key={file.value}\n                        value={file.value}\n                        onSelect={(currentValue) => {\n                          const selected = files.find(\n                            (file) => file.value === currentValue\n                          );\n                          if (selected) {\n                            onFileChange(selected);\n                          }\n                          setOpen(false);\n                        }}\n                        className=\"text-muted-foreground hover:text-[hsl(var(--primary))]\"\n                      >\n                        <Check\n                          className={cn(\n                            \"mr-2 h-4 w-4\",\n                            selectedFile.value === file.value\n                              ? \"opacity-100\"\n                              : \"opacity-0\"\n                          )}\n                        />\n                        {file.label}\n                      </CommandItem>\n                    ))}\n                  </CommandGroup>\n                </CommandList>\n              </Command>\n            </PopoverContent>\n          </Popover>\n        </div>\n        <div className=\"flex items-center gap-4\">\n          <div className=\"flex flex-col items-end\">\n            <span className=\"text-sm text-muted-foreground\">\n              {progress}% Complete\n            </span>\n            <Progress value={progress} className=\"w-32 h-1.5 mt-1\" />\n          </div>\n          <Image\n            height={32}\n            width={150}\n            src=\"https://9xunyj9nbtcqjdrd.public.blob.vercel-storage.com/lumon-bnmDHU0WvLZp4fEIo7pYFRxdNkWHNi.png\"\n            alt=\"Logo\"\n            className=\"px-2 py-4\"\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:file",
      "target": "components/terminal/header.tsx"
    },
    {
      "path": "components/terminal/footer.tsx",
      "content": "import { SectionContainer } from \"./section-container\";\n\nexport interface SectionData {\n  id: string;\n  progress: number;\n  active: boolean;\n}\n\ninterface FooterProps {\n  sections: SectionData[];\n}\n\nexport function Footer({ sections }: FooterProps) {\n  return (\n    <div className=\"border-t border-border p-4 bg-card\">\n      <div className=\"w-full grid grid-cols-5 gap-2\">\n        {sections.map((section) => (\n          <SectionContainer\n            key={section.id}\n            id={section.id}\n            progress={section.progress}\n            active={section.active}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:file",
      "target": "components/terminal/footer.tsx"
    },
    {
      "path": "components/terminal/number-grid.tsx",
      "content": "\"use client\"\n\nimport { useEffect, useRef, useState } from \"react\"\n\ninterface NumberGridProps {\n  onNumberClick: (rowIndex: number, colIndex: number) => void\n}\n\nexport function NumberGrid({ onNumberClick }: NumberGridProps) {\n  // Grid dimensions\n  const ROWS = 10\n  const COLS = 15\n  const HIGHLIGHT_SIZE = 3\n\n  const [numberGrid, setNumberGrid] = useState<number[][]>([])\n  const [highlightedArea, setHighlightedArea] = useState<{\n    startRow: number\n    startCol: number\n  }>({ startRow: 0, startCol: 0 })\n  const [isHighlightVisible, setIsHighlightVisible] = useState(false)\n  const [highlightOpacity, setHighlightOpacity] = useState(0)\n  const timerRef = useRef<NodeJS.Timeout | null>(null)\n\n  // Generate random grid of numbers\n  const generateNumberGrid = (rows: number, cols: number) => {\n    const grid = []\n    for (let i = 0; i < rows; i++) {\n      const row = []\n      for (let j = 0; j < cols; j++) {\n        row.push(Math.floor(Math.random() * 10))\n      }\n      grid.push(row)\n    }\n    return grid\n  }\n\n  // Initialize grid\n  useEffect(() => {\n    setNumberGrid(generateNumberGrid(ROWS, COLS))\n  }, [])\n\n  // Function to generate a new highlighted area\n  const generateNewHighlightedArea = () => {\n    // Ensure the 3x3 grid fits within our number grid\n    const maxStartRow = ROWS - HIGHLIGHT_SIZE\n    const maxStartCol = COLS - HIGHLIGHT_SIZE\n\n    const startRow = Math.floor(Math.random() * maxStartRow)\n    const startCol = Math.floor(Math.random() * maxStartCol)\n\n    setHighlightedArea({ startRow, startCol })\n\n    // Start fade-in animation\n    setHighlightOpacity(0)\n    setIsHighlightVisible(true)\n\n    // Animate opacity from 0 to 1 over 500ms\n    let opacity = 0\n    const fadeInterval = setInterval(() => {\n      opacity += 0.1\n      setHighlightOpacity(opacity)\n      if (opacity >= 1) {\n        clearInterval(fadeInterval)\n      }\n    }, 50)\n  }\n\n  // Set up the highlight cycle\n  const startHighlightCycle = () => {\n    // Clear any existing timer\n    if (timerRef.current) {\n      clearTimeout(timerRef.current)\n    }\n\n    // Generate new highlighted area\n    generateNewHighlightedArea()\n\n    // Set timer for next cycle\n    timerRef.current = setTimeout(startHighlightCycle, 5000)\n  }\n\n  // Initialize and manage highlight cycle\n  useEffect(() => {\n    if (numberGrid.length > 0) {\n      startHighlightCycle()\n    }\n\n    return () => {\n      if (timerRef.current) {\n        clearTimeout(timerRef.current)\n      }\n    }\n  }, [numberGrid])\n\n  // Check if a position is within the highlighted 3x3 area\n  const isHighlighted = (rowIndex: number, colIndex: number) => {\n    if (!isHighlightVisible) return false\n\n    const { startRow, startCol } = highlightedArea\n    return (\n      rowIndex >= startRow &&\n      rowIndex < startRow + HIGHLIGHT_SIZE &&\n      colIndex >= startCol &&\n      colIndex < startCol + HIGHLIGHT_SIZE\n    )\n  }\n\n  const handleClick = (rowIndex: number, colIndex: number) => {\n    // Check if the clicked position is within the highlighted area\n    if (!isHighlighted(rowIndex, colIndex)) return\n\n    // Unhighlight the grid\n    setIsHighlightVisible(false)\n\n    // Reset the timer to start a new 5-second cycle\n    if (timerRef.current) {\n      clearTimeout(timerRef.current)\n    }\n    timerRef.current = setTimeout(startHighlightCycle, 5000)\n\n    // Pass the click to the parent component\n    onNumberClick(rowIndex, colIndex)\n  }\n\n  // Method to regenerate the grid (exposed for parent component)\n  const regenerateGrid = () => {\n    setNumberGrid(generateNumberGrid(ROWS, COLS))\n  }\n\n  // Expose the regenerateGrid method to parent components\n  NumberGrid.regenerateGrid = regenerateGrid\n\n  return (\n    <div className=\"p-6 min-h-[400px] flex flex-col items-center justify-center bg-card\">\n      <div className=\"grid grid-cols-1 gap-y-2 font-mono text-center w-full\">\n        {numberGrid.map((row, rowIndex) => (\n          <div key={rowIndex} className=\"flex justify-center gap-x-4\">\n            {row.map((num, colIndex) => {\n              const highlighted = isHighlighted(rowIndex, colIndex)\n\n              return (\n                <div\n                  key={`${rowIndex}-${colIndex}`}\n                  className={`w-6 h-6 flex items-center justify-center text-xs sm:text-sm transition-all duration-300\n                    ${\n                      highlighted ? \"text-[hsl(var(--primary))] scale-150 z-10 cursor-pointer\" : \"text-muted-foreground\"\n                    }`}\n                  style={{\n                    opacity: highlighted ? highlightOpacity : 1,\n                  }}\n                  onClick={() => handleClick(rowIndex, colIndex)}\n                >\n                  {num}\n                </div>\n              )\n            })}\n          </div>\n        ))}\n      </div>\n    </div>\n  )\n}\n",
      "type": "registry:file",
      "target": "components/terminal/number-grid.tsx"
    },
    {
      "path": "components/terminal/section-container.tsx",
      "content": "\"use client\"\n\nimport { Progress } from \"@/components/ui/progress\"\nimport { Card, CardContent } from \"@/components/ui/card\"\nimport { useEffect, useState } from \"react\"\n\ninterface SectionContainerProps {\n  id: string\n  progress: number\n  active: boolean\n}\n\nexport function SectionContainer({ id, progress, active }: SectionContainerProps) {\n  const [animationState, setAnimationState] = useState<\"idle\" | \"opening\" | \"opened\" | \"closing\">(\"idle\")\n\n  // Control the animation sequence\n  useEffect(() => {\n    let timeoutId: NodeJS.Timeout\n\n    if (active) {\n      // Start opening animation\n      setAnimationState(\"opening\")\n\n      // After opening completes, set to opened state\n      timeoutId = setTimeout(() => {\n        setAnimationState(\"opened\")\n\n        // Start closing animation after a delay\n        timeoutId = setTimeout(() => {\n          setAnimationState(\"closing\")\n\n          // Reset to idle after closing animation completes\n          timeoutId = setTimeout(() => {\n            setAnimationState(\"idle\")\n          }, 1000) // Fade-out duration\n        }, 1500) // How long to stay fully opened\n      }, 700) // Opening duration\n    } else {\n      setAnimationState(\"idle\")\n    }\n\n    return () => {\n      if (timeoutId) clearTimeout(timeoutId)\n    }\n  }, [active])\n\n  return (\n    <div className=\"flex flex-col\">\n      <div className=\"relative\">\n        {/* Box opening animation lines */}\n        <div\n          className={`absolute -top-6 left-0 w-1/3 h-6 border-l border-t border-[hsl(var(--primary))] transition-all duration-700\n            ${animationState === \"idle\" ? \"opacity-0\" : \"\"}\n            ${animationState === \"opening\" ? \"opacity-100\" : \"\"}\n            ${animationState === \"opened\" ? \"opacity-100\" : \"\"}\n            ${animationState === \"closing\" ? \"opacity-0\" : \"\"}`}\n          style={{\n            transform: animationState !== \"idle\" ? \"translateY(-4px)\" : \"translateY(0)\",\n            transitionProperty: \"opacity, transform\",\n          }}\n        ></div>\n        <div\n          className={`absolute -top-6 right-0 w-1/3 h-6 border-r border-t border-[hsl(var(--primary))] transition-all duration-700\n            ${animationState === \"idle\" ? \"opacity-0\" : \"\"}\n            ${animationState === \"opening\" ? \"opacity-100\" : \"\"}\n            ${animationState === \"opened\" ? \"opacity-100\" : \"\"}\n            ${animationState === \"closing\" ? \"opacity-0\" : \"\"}`}\n          style={{\n            transform: animationState !== \"idle\" ? \"translateY(-4px)\" : \"translateY(0)\",\n            transitionProperty: \"opacity, transform\",\n          }}\n        ></div>\n\n        {/* Container - Card component */}\n        <Card\n          className={`mb-1 p-0 overflow-hidden bg-card transition-all duration-500\n            ${animationState !== \"idle\" ? \"border-[hsl(var(--primary))]\" : \"border-border\"}`}\n        >\n          <CardContent className=\"p-2 text-center text-xs font-mono\">\n            <span\n              className={`transition-colors duration-500 ${animationState !== \"idle\" ? \"text-[hsl(var(--primary))]\" : \"text-muted-foreground\"}`}\n            >\n              {id}\n            </span>\n          </CardContent>\n        </Card>\n      </div>\n      <Progress\n        value={progress}\n        className={`h-2 transition-all duration-700 bg-muted`}\n        indicatorClassName={`bg-[hsl(var(--primary))] ${animationState === \"opening\" ? \"animate-pulse\" : \"\"}`}\n      />\n      <div className=\"text-center text-xs font-mono text-muted-foreground mt-1\">{progress}%</div>\n    </div>\n  )\n}\n",
      "type": "registry:file",
      "target": "components/terminal/section-container.tsx"
    }
  ]
}